replicaCount: 1

# -- Set a custom start ordinal number for the K8s stateful set.
# Note that this depends on the StatefulSetStartOrdinal K8s feature gate,
# which has entered beta state with K8s version 1.27.
#
ordinals:

  # -- Enable only if StatefulSetStartOrdinal K8s feature gate is available.
  #
  enabled: false

  # -- Set start ordinal to a positive integer, defaulting to 0.
  #
  start: 0

# Image configuration
#
image:

  # -- The Bamboo Docker image to use
  # https://hub.docker.com/r/atlassian/bamboo
  #
  repository: atlassian/bamboo

  # -- Image pull policy
  #
  pullPolicy: IfNotPresent

  # -- The docker image tag to be used - defaults to the Chart appVersion
  #
  tag: ""

# K8s ServiceAccount configuration. Give fine-grained identity and authorization
# to Pods
#
serviceAccount:

  # -- Set to 'true' if a ServiceAccount should be created, or 'false' if it
  # already exists.
  #
  create: true

  # -- The name of the ServiceAccount to be used by the pods. If not specified, but
  # the "serviceAccount.create" flag is set to 'true', then the ServiceAccount name
  # will be auto-generated, otherwise the 'default' ServiceAccount will be used.
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
  #
  name:

  # -- For Docker images hosted in private registries, define the list of image pull
  # secrets that should be utilized by the created ServiceAccount
  # https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  #
  imagePullSecrets: []
  # - name: secretName

  # -- Annotations to add to the ServiceAccount (if created)
  #
  annotations: {}

# REQUIRED - Database configuration
#
# Bamboo requires a backend database. The configuration below can be used to define the
# database to use and its connection details.
# https://atlassian.github.io/data-center-helm-charts/userguide/CONFIGURATION/#database-connectivity
#
database:
  type: postgresql
  url: jdbc:postgresql://postgres-svc:5432/postgresdb
  credentials:
    secretName: bamboo-secret
    usernameSecretKey: dusername
    passwordSecretKey: dpassword

volumes:
  localHome:
    customVolume:
     persistentVolumeClaim:
      claimName: "bamboo-local-home-claim"
    mountPath: "/var/atlassian/application-data/bamboo"

  sharedHome:
    customVolume:
     persistentVolumeClaim:
      claimName: "bamboo-shared-home-claim"
    mountPath: "/var/atlassian/application-data/shared-home"
    subPath:
    nfsPermissionFixer:
      enabled: true
      mountPath: "/shared-home"
      imageRepo: alpine
      imageTag: latest
      resources: 
       requests:
         cpu: "1m"
         memory: "20Mi"
       limits:
         cpu: "1"
         memory: "1G"

      # -- By default, the fixer will change the group ownership of the volume's root directory
      # to match the Bamboo container's GID (2001), and then ensures the directory is
      # group-writeable. If this is not the desired behaviour, command used can be specified
      # here.
      #
      command:

  # -- Defines additional volumes that should be applied to all Bamboo pods.
  # Note that this will not create any corresponding volume mounts;
  # those needs to be defined in bamboo.additionalVolumeMounts
  #
  additional: []


# Ingress configuration
#
# To make the Atlassian product available from outside of the K8s cluster an Ingress
# Controller should be pre-provisioned. With this in place the configuration below
# can be used to configure an appropriate Ingress Resource.
# https://atlassian.github.io/data-center-helm-charts/userguide/CONFIGURATION/#ingress
#
ingress:
  create: true
  openShiftRoute: false
  routeHttpHeaders: {}
  className: "nginx"
  nginx: true
  maxBodySize: 250m
  proxyConnectTimeout: 60
  proxyReadTimeout: 60
  proxySendTimeout: 60
  host: k8s-71616.prod.atl-cd.net
  path:

  # -- The custom annotations that should be applied to the Ingress Resource.
  # If using an ingress-nginx controller be sure that the annotations you add
  # here are compatible with those already defined in the 'ingess.yaml' template
  #
  annotations: {}

  # -- Set to 'true' if browser communication with the application should be TLS
  # (HTTPS) enforced. If not using an ingress and you want to reach the service
  # on localhost using port-forwarding then this value should be set to 'false'
  #
  https: false
  tlsSecretName:

# Bamboo configuration
#
bamboo:

  # -- Whether the main container should acquire helm release name. By default the container name is `bamboo` which corresponds to the name of the Helm Chart.
  #
  useHelmReleaseNameAsContainerName: false

  # -- To skip the setup wizard post deployment set this property to 'true' and
  # ensure values for all 'REQUIRED' and 'UNATTENDED-SETUP' stanzas
  # (see banner of this file) have been supplied.
  #
  # For release 1.0.0 this value is by default set to 'true' and should not be changed.
  #
  unattendedSetup: true

  # -- Override the server/agent broker URL; this is optional.
  #
  brokerUrl:

  # The security token with which the agent will authenticate to the Bamboo server.
  # The token should be set to a 40-character hexadecimal string. There are many ways
  # to generate a hex string like this, here is one: "xxd -l 20 -p /dev/urandom"
  # Additional details are here: https://confluence.atlassian.com/bamboo/agent-authentication-289277196.html
  #
  securityToken:

    # -- The name of the K8s Secret that contains the security token. When specified the token
    # will overrided the generated one. This secret should also be shared with the agent deployment.
    # An Example of creating a K8s secret for the secret below:
    # 'kubectl create secret generic <secret-name> --from-literal=security-token=<security token>'
    # https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
    #
    secretName: bamboo-secret

    # -- The key (default `secretKey`) in the Secret used to store the Bamboo shared key.
    #
    secretKey: security-token

  # -- Whether to disable agent authentication. Setting this to true
  # skips the agent approval step in the UI. For more information see:
  # https://confluence.atlassian.com/bamboo/agent-authentication-289277196.html
  #
  # The default is false.
  #
  disableAgentAuth: false

  # UNATTENDED-SETUP
  #
  # -- The Bamboo DC license that should be used.
  # If supplied here the license configuration will be
  # skipped in the setup wizard.
  #
  license:

    # -- The secret that contains the license information
    #
    secretName:  bamboo-secret

    # -- The key (default 'licenseKey') in the Secret used to store the license information
    #
    secretKey: license

  # UNATTENDED-SETUP
  #
  # -- The admin user configuration, and credentials
  # that Bamboo should use. If supplied here the admin
  # configuration will be skipped in the setup wizard.
  #
  sysadminCredentials:

    # -- The secret that contains the admin user information
    #
    secretName:  bamboo-secret

    # -- The key in the Kubernetes Secret that contains the sysadmin username
    #
    usernameSecretKey: username

    # -- The key in the Kubernetes Secret that contains the sysadmin password
    #
    passwordSecretKey: password

    # -- The key in the Kubernetes Secret that contains the sysadmin display name
    #
    displayNameSecretKey: displayName

    # -- The key in the Kubernetes Secret that contains the sysadmin email address
    #
    emailAddressSecretKey: emailAddress

  # -- Bamboo can optionally import an existing exported dataset on
  # first-run. These optional values can configure the import file or
  # skip this stage entirely. For more details on importing and
  # exporting see the documentation:
  #
  # https://confluence.atlassian.com/bamboo/exporting-data-for-backup-289277255.html
  # https://confluence.atlassian.com/bamboo/importing-data-from-backup-289277260.html
  #
  import:

    # -- Import type. Valid values are `clean` (for a new install) or
    # `import`, in which case you should provide the file path. The
    # default is `clean`.
    #
    type: clean

    # -- Path to the existing export to import to the new
    # installation. This should be accessible by the cluster node;
    # e.g. via the shared-home or `additionalVolumeMounts` below.
    #
    path:

  # K8s Service configuration
  #
  service:

    # -- The port on which the Bamboo K8s Service will listen for http traffic
    #
    port: 80

    # -- The type of K8s service to use for Bamboo
    #
    type: ClusterIP

    # -- Session affinity type. If you want to make sure that connections from a particular client
    # are passed to the same pod each time, set sessionAffinity to ClientIP.
    # See: https://kubernetes.io/docs/reference/networking/virtual-ips/#session-affinity
    #
    sessionAffinity: None

    # -- Session affinity configuration
    #
    sessionAffinityConfig:

      clientIP:

        # -- Specifies the seconds of ClientIP type session sticky time.
        # The value must be > 0 && <= 86400 (for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800 (for 3 hours).
        #
        timeoutSeconds:

    # -- Use specific loadBalancerIP. Only applies to service type LoadBalancer.
    #
    loadBalancerIP:

    # -- The Tomcat context path that Bamboo will use. The ATL_TOMCAT_CONTEXTPATH
    # will be set automatically.
    #
    contextPath:

    # -- Additional annotations to apply to the Service
    #
    annotations: {}

  # K8s Service configuration for JMS
  #
  jmsService:

    # -- Whether to create a separate Service for JMS Agent traffic
    #
    enabled: false

    # -- The port on which the Bamboo K8s Service will listen for Agent traffic
    #
    port: 54663

    # -- The type of K8s service to use for JMS
    #
    type: ClusterIP

    # -- Use specific loadBalancerIP. Only applies to service type LoadBalancer.
    #
    loadBalancerIP:

    # -- Additional annotations to apply to the JMS Service
    #
    annotations: {}

  # Standard K8s field that holds pod-level security attributes and common container settings.
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  # Do not populate when deploying to OpenShift, unless anyuid policy is attached to a service account.

  # -- Whether to apply security context to pod.
  #
  securityContextEnabled: true

  securityContext:

    # -- The GID used by the Bamboo docker image
    # GID will default to 2005 if not supplied and securityContextEnabled is set to true.
    # This is intended to ensure that the shared-home volume is group-writeable by the GID used by the Bamboo container.
    # However, this doesn't appear to work for NFS volumes due to a K8s bug: https://github.com/kubernetes/examples/issues/260
    #
    fsGroup: 2005

  # -- Standard K8s field that holds security configurations that will be applied to a container.
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  #
  containerSecurityContext: {}

  # -- Boolean to define whether to set local home directory permissions on startup
  # of Bamboo container. Set to 'false' to disable this behaviour.
  #
  setPermissions: true

  # Port definitions
  #
  ports:

    # -- The port on which the Bamboo container listens for HTTP traffic
    #
    http: 8085

    # -- JMS port
    #
    jms: 54663

  # Confirm that Bamboo is up and running with a ReadinessProbe
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes
  #
  readinessProbe:

    # -- Whether to apply the readinessProbe check to pod.
    #
    enabled: true

    # -- The initial delay (in seconds) for the Bamboo container readiness probe,
    # after which the probe will start running.
    #
    initialDelaySeconds: 30

    # -- How often (in seconds) the Bamboo container readiness probe will run
    #
    periodSeconds: 10

    # -- Number of seconds after which the probe times out
    #
    timeoutSeconds: 1

    # -- The number of consecutive failures of the Bamboo container readiness probe
    # before the pod fails readiness checks.
    #
    failureThreshold: 30

    # -- Custom ReadinessProbe to override the default /status httpGet
    #
    customProbe: {}
#      tcpSocket:
#        port: 8080
#      periodSeconds: 5
#      failureThreshold: 120

  # Confirm that Bamboo is up and running with a StartupProbe
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  #
  startupProbe:

    # -- Whether to apply the startupProbe check to pod.
    #
    enabled: false

    # -- Time to wait before starting the first probe
    #
    initialDelaySeconds: 60

    # -- How often (in seconds) the Bamboo container startup probe will run
    #
    periodSeconds: 5

    # -- The number of consecutive failures of the Bamboo container startup probe
    # before the pod fails startup checks.
    #
    failureThreshold: 120

  # Ensure that the server responds with a LivenessProbe
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe
  #
  livenessProbe:

    # -- Whether to apply the livenessProbe check to pod.
    #
    enabled: false

    # -- Time to wait before starting the first probe
    #
    initialDelaySeconds: 60

    # -- How often (in seconds) the Bamboo container liveness probe will run
    #
    periodSeconds: 5

    # -- Number of seconds after which the probe times out
    #
    timeoutSeconds: 1

    # -- The number of consecutive failures of the Bamboo container liveness probe
    # before the pod fails liveness checks.
    #
    failureThreshold: 12

    # -- Custom livenessProbe to override the default tcpSocket probe
    #
    customProbe: {}

  # Bamboo log configuration
  #
  accessLog:

    # -- The path within the Bamboo container where the local-home volume should be
    # mounted in order to capture access logs.
    #
    mountPath: "/opt/atlassian/bamboo/logs"

    # -- The subdirectory within the local-home volume where access logs should be
    # stored.
    #
    localHomeSubPath: "log"

  shutdown:

    # -- The termination grace period for pods during shutdown. This
    # should be set to the internal grace period, plus a small buffer
    # to allow the JVM to fully terminate.
    #
    terminationGracePeriodSeconds: 30

    # -- By default pods will be stopped via a [preStop hook](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/),
    # using a script supplied by the Docker image. If any other
    # shutdown behaviour is needed it can be achieved by overriding
    # this value. Note that the shutdown command needs to wait for the
    # application shutdown completely before exiting; see [the default
    # command](https://bitbucket.org/atlassian-docker/docker-bamboo-server/src/master/shutdown-wait.sh)
    # for details.
    #
    command: "/shutdown-wait.sh"

  # -- PostStart is executed immediately after a container is created.
  # However, there is no guarantee that the hook will execute before the container ENTRYPOINT.
  # See: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
  #
  postStart:
    command:

  # Pod resource requests
  #
  resources:

    # JVM Memory / Heap Size definitions. These values below are based on the
    # defaults defined for the Bamboo docker container.
    # https://bitbucket.org/atlassian-docker/docker-bamboo-server/src/master
    #
    jvm:

      # -- The maximum amount of heap memory that will be used by the Bamboo JVM
      #
      maxHeap: "1024m"

      # -- The minimum amount of heap memory that will be used by the Bamboo JVM
      #
      minHeap: "512m"

    # Specifies the standard K8s resource requests and/or limits for the Bamboo
    # container. It is important that if the memory resources are specified here,
    # they must allow for the size of the Bamboo JVM. That means the maximum heap
    # size, plus other JVM overheads, must be accommodated.
    # Allowing for (maxHeap)*1.5 would be an example.
    #
    container:

      requests:

        # -- Initial CPU request by Bamboo pod
        #
        cpu: "1m"

        # -- Initial Memory request by Bamboo pod
        #
        memory: "2G"
      #  limits:
      #    cpu: "2"
      #    memory: "2G"

  # -- The Docker entrypoint.py generates application configuration on
  # first start; not all of these files are regenerated on subsequent starts.
  # By default, bamboo.cfg.xml is generated only once. Set `forceConfigUpdate` to true
  # to change this behavior.
  #
  forceConfigUpdate: false

  # -- Specifies a list of additional arguments that can be passed to the Bamboo JVM, e.g.
  # system properties.
  #
  additionalJvmArgs:
    - "-Dupm.plugin.upload.enabled=true"

  # -- By default Tomcat's server.xml is generated in the container entrypoint from a template
  # shipped with an official Bamboo image. However, server.xml generation may fail if container
  # is not run as root, which is a common case if Bamboo is deployed to OpenShift.
  # See: https://bitbucket.org/atlassian-docker/docker-bamboo-server/src/master/README.md for a complete list of xml elements.
  tomcatConfig:

    # -- Mount server.xml as a ConfigMap. Override configuration elements if necessary
    #
    generateByHelm: false

    mgmtPort: "8005"
    port: "8085"
    maxThreads: "100"
    minSpareThreads: "10"
    connectionTimeout: "20000"
    enableLookups: "false"
    protocol: "HTTP/1.1"
    redirectPort: "8443"
    acceptCount: "10"
    # secure is retrieved from ingress.https value
    secure:
    # scheme is set depending on ingress.https value (http if false, https if true)
    scheme:
    # proxyName is retrieved from ingress.host value
    proxyName:
    # proxyPort is set depending on ingress.https value (80 if http, 443 if https)
    proxyPort:
    maxHttpHeaderSize: "8192"
    address:
    secret:
    secretRequired:
    bambooEncryptionKey:
    sslEnabled:
    sslProtocol:
    sslCertificateFile:
    sslCertificateKeyFile:
    sslPass:
    keystoreFile:
    keystorePass:
    keyPass:
    clientAuth:
    truststoreFile:
    truststorePass:
    compression:
    compressibleMimeType:
    compressionMinSize:
    proxyInternalIps:
    trustedProxies:
    requestAttributesEnabled:

    # -- Custom server.xml to be mounted into /opt/atlassian/bamboo/conf
    #
    customServerXml: |
   #      <?xml version='1.0' encoding='utf-8'?>
 #      <Server port="8005" shutdown="SHUTDOWN">
 #      </Server>

  # -- By default seraph-config.xml is generated in the container entrypoint from a template
  # shipped with an official Bamboo image. However, seraph-config.xml generation may fail if container
  # is not run as root, which is a common case if Bamboo is deployed to OpenShift.
  #
  seraphConfig:

    # -- Mount seraph-config.xml as a ConfigMap. Override configuration elements if necessary
    #
    generateByHelm: false

    autoLoginCookieAge: "1209600"

  # -- Specifies a list of additional Java libraries that should be added to the
  # Bamboo container. Each item in the list should specify the name of the volume
  # that contains the library, as well as the name of the library file within that
  # volume's root directory. Optionally, a subDirectory field can be included to
  # specify which directory in the volume contains the library file. Additional details:
  # https://atlassian.github.io/data-center-helm-charts/examples/external_libraries/EXTERNAL_LIBS/
  #
  additionalLibraries: []
  #  - volumeName:
  #    subDirectory:
  #    fileName:

  # -- Specifies a list of additional Bamboo plugins that should be added to the
  # Bamboo container. Note plugins installed via this method will appear as
  # bundled plugins rather than user plugins. These should be specified in the same
  # manner as the 'additionalLibraries' property. Additional details:
  # https://atlassian.github.io/data-center-helm-charts/examples/external_libraries/EXTERNAL_LIBS/
  #
  # NOTE: only .jar files can be loaded using this approach. OBR's can be extracted
  # (unzipped) to access the associated .jar
  #
  # An alternative to this method is to install the plugins via "Manage Apps" in the
  # product system administration UI.
  #
  additionalBundledPlugins: []
  #  - volumeName:
  #    subDirectory:
  #    fileName:

  # -- Defines any additional volumes mounts for the Bamboo container. These
  # can refer to existing volumes, or new volumes can be defined via
  # 'volumes.additional'.
  #
  additionalVolumeMounts: []




  
  # -- Defines any additional environment variables to be passed to the Bamboo
  # container. See https://hub.docker.com/r/atlassian/bamboo for
  # supported variables.
  #
  additionalEnvironmentVariables: []

  # -- Defines any additional ports for the Bamboo container.
  #
  additionalPorts: []
  #  - name: jmx
  #    containerPort: 5555
  #    protocol: TCP

  # -- Defines additional volumeClaimTemplates that should be applied to the Bamboo pod.
  # Note that this will not create any corresponding volume mounts;
  # those needs to be defined in bamboo.additionalVolumeMounts
  #
  additionalVolumeClaimTemplates: []
  #  - name: myadditionalvolumeclaim
  #    storageClassName:
  #    resources:
  #      requests:
  #        storage: 1Gi

  # -- Defines topology spread constraints for Bamboo pods. See details:
  # https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  #
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: kubernetes.io/hostname
  #   whenUnsatisfiable: ScheduleAnyway
  #   labelSelector:
  #     matchLabels:

  # -- Certificates to be added to Java truststore. Provide reference to a secret that contains the certificates
  #
  additionalCertificates:
    secretName:
    customCmd:

# Monitoring
#
monitoring:

  # -- Expose JMX metrics with jmx_exporter https://github.com/prometheus/jmx_exporter
  #
  exposeJmxMetrics: false

  # --  JMX exporter init container configuration
  #
  jmxExporterInitContainer:

    # -- Whether to run JMX exporter init container as root to copy JMX exporter binary to shared home volume.
    # Set to false if running containers as root is not allowed in the cluster.
    #
    runAsRoot: true

    # -- Custom SecurityContext for the jmx exporter init container
    #
    customSecurityContext: {}

    # -- Resources requests and limits for the JMX exporter init container
    # See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #
    resources: {}
    #  requests:
    #    cpu: "1m"
    #    memory: "20Mi"
    #  limits:
    #    cpu: "1"
    #    memory: "1G"

  # -- Annotations added to the jmx service
  #
  jmxServiceAnnotations: {}

  # -- Fetch jmx_exporter jar from the image. If set to false make sure to manually copy the jar
  # to shared home and provide an absolute path in jmxExporterCustomJarLocation
  #
  fetchJmxExporterJar: true

  # -- Image repository with jmx_exporter jar
  #
  jmxExporterImageRepo: bitnami/jmx-exporter

  # -- Image tag to be used to pull jmxExporterImageRepo
  #
  jmxExporterImageTag: 0.18.0

  # -- Port number on which metrics will be available
  #
  jmxExporterPort: 9999

  # -- JMX exporter port type
  #
  jmxExporterPortType: ClusterIP

  # -- Location of jmx_exporter jar file if mounted from a secret or manually copied to shared home
  #
  jmxExporterCustomJarLocation:

  # -- Custom JMX config with the rules
  #
  jmxExporterCustomConfig: {}
  #  rules:
  #   - pattern: ".*"

  serviceMonitor:

    # -- Create ServiceMonitor to start scraping metrics. ServiceMonitor CRD needs to be created in advance.
    #
    create: false

    # -- ServiceMonitorSelector of the prometheus instance.
    #
    prometheusLabelSelector: {}
      # release: prometheus

    # -- Scrape interval for the JMX service.
    #
    scrapeIntervalSeconds: 30

  grafana:

    # -- Create ConfigMaps with Grafana dashboards
    #
    createDashboards: false

    # -- Label selector for Grafana dashboard importer sidecar
    #
    dashboardLabels: {}
    # grafana_dashboard: dc_monitoring

    # -- Annotations added to Grafana dashboards ConfigMaps. See: https://github.com/kiwigrid/k8s-sidecar#usage
    #
    dashboardAnnotations: {}
      # k8s-sidecar-target-directory: /tmp/dashboards/example-folder

# Fluentd configuration
#
# Bamboo log collection and aggregation can be enabled using Fluentd. This config
# assumes an existing ELK stack has been stood up and is available.
# https://www.fluentd.org/
#
fluentd:

  # -- Set to 'true' if the Fluentd sidecar (DaemonSet) should be added to each pod
  #
  enabled: false

  # -- The Fluentd sidecar image repository
  #
  imageRepo: fluent/fluentd-kubernetes-daemonset

  # -- The Fluentd sidecar image tag
  #
  imageTag: v1.11.5-debian-elasticsearch7-1.2

  # -- Resources requests and limits for fluentd sidecar container
  # See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  #
  resources: 
   requests:
    cpu: "1m"
    memory: "20Mi"
  limits:
    cpu: "1"
    memory: "1G"

  # -- The command used to start Fluentd. If not supplied the default command
  # will be used: "fluentd -c /fluentd/etc/fluent.conf -v"
  #
  # Note: The custom command can be free-form, however pay particular attention to
  # the process that should ultimately be left running in the container. This process
  # should be invoked with 'exec' so that signals are appropriately propagated to it,
  # for instance SIGTERM. An example of how such a command may look is:
  # "<command 1> && <command 2> && exec <primary command>"
  command:

  # -- Set to 'true' if a custom config (see 'configmap-fluentd.yaml' for default)
  # should be used for Fluentd. If enabled this config must supplied via the
  # 'fluentdCustomConfig' property below.
  #
  customConfigFile: false

  # -- Custom fluent.conf file
  #
  fluentdCustomConfig: {}
  # fluent.conf: |
    # <source>
    #   @type tail
    #   <parse>
    #   @type multiline
    #   format_firstline /\d{4}-\d{1,2}-\d{1,2}/
    #   </parse>
    #   path /opt/atlassian/bamboo/logs/access_log.*
    #   pos_file /tmp/bamboolog.pos
    #   tag bamboo-access-logs
    # </source>

  # -- The port on which the Fluentd sidecar will listen
  #
  httpPort: 9880

  # Elasticsearch config based on your ELK stack
  #
  elasticsearch:

    # -- Set to 'true' if Fluentd should send all log events to an Elasticsearch service.
    #
    enabled: true

    # -- The hostname of the Elasticsearch service that Fluentd should send logs to.
    #
    hostname: elasticsearch

    # -- The prefix of the Elasticsearch index name that will be used
    #
    indexNamePrefix: bamboo

  # -- Specify custom volumes to be added to Fluentd container (e.g. more log sources)
  #
  extraVolumes: []
  # - name: local-home
  #   mountPath: /opt/atlassian/bamboo/logs
  #   subPath: log
  #   readOnly: true


# -- Custom annotations that will be applied to all Bamboo pods
#
podAnnotations: {}
#  name: <value>

# -- Custom labels that will be applied to all Bamboo pods
#
podLabels: {}
#  name: <value>

# -- Standard K8s node-selectors that will be applied to all Bamboo pods
#
nodeSelector: {}
#  name: <value>

# -- Standard K8s tolerations that will be applied to all Bamboo pods
#
tolerations: []
# - effect: <name>
#   operator: <operator>
#   key: <key>

# -- Standard K8s affinities that will be applied to all Bamboo pods
#
affinity: {}
#  name: <value>

# -- Standard K8s schedulerName that will be applied to all Bamboo pods.
# Check Kubernetes documentation on how to configure multiple schedulers:
# https://kubernetes.io/docs/tasks/extend-kubernetes/configure-multiple-schedulers/#specify-schedulers-for-pods
#
schedulerName:

# -- Priority class for the application pods. The PriorityClass with this name needs to be available in the cluster.
# For details see https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
#
priorityClassName:

# -- Additional container definitions that will be added to all Bamboo pods
#
additionalContainers: []
#  - name: <name>
#    image: <image>:<tag>



# -- Additional labels that should be applied to all resources
#
additionalLabels: {}
#  name: <value>

# -- Additional existing ConfigMaps and Secrets not managed by Helm that should be
# mounted into service container. Configuration details below (camelCase is important!):
  # 'name'      - References existing ConfigMap or secret name.
  # 'type'      - 'configMap' or 'secret'
  # 'key'       - The file name.
  # 'mountPath' - The destination directory in a container.
# VolumeMount and Volumes are added with this name and index position, for example;
# custom-config-0, keystore-2
#
additionalFiles: []
#  - name: custom-config
#    type: configMap
#    key: log4j.properties
#    mountPath:  /var/atlassian
#  - name: custom-config
#    type: configMap
#    key: web.xml
#    mountPath: /var/atlassian
#  - name: keystore
#    type: secret
#    key: keystore.jks
#    mountPath: /var/ssl

# -- PodDisruptionBudget: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
# You can specify only one of maxUnavailable and minAvailable in a single PodDisruptionBudget. When both minAvailable and maxUnavailable are set, maxUnavailable takes precedence.
#
podDisruptionBudget:
  enabled: false
  labels: {}
  annotations: {}
  minAvailable:
  maxUnavailable:

# -- Create additional ConfigMaps with given names, keys and content. Ther Helm release name will be used as a prefix
# for a ConfigMap name, fileName is used as subPath
#
additionalConfigMaps: []
#  - name: extra-configmap
#    keys:
#      - fileName: hello.properties
#        mountPath: /opt/atlassian/jira/atlassian-jira/WEB-INF/classes
#        defaultMode:
#        content: |
#          foo=bar
#          hello=world
#      - fileName: hello.xml
#        mountPath: /opt/atlassian/jira/atlassian-jira/WEB-INF/classes
#        content: |
#          <xml>
#          </xml>

atlassianAnalyticsAndSupport:

  analytics:

    # -- Mount ConfigMap with selected Helm chart values as a JSON
    # which DC products will read and send analytics events to Atlassian data pipelines
    #
    enabled: true

  helmValues:

    # -- Mount ConfigMap with selected Helm chart values as a YAML file
    # which can be optionally including to support.zip
    #
    enabled: true

# -- Metadata and pod spec for pods started in Helm tests
#
testPods:
  resources: {}
  labels: {}
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  schedulerName:
  image:
    permissionsTestContainer: debian:stable-slim
    statusTestContainer: alpine:latest

openshift:

  # -- When set to true, the containers will run with a restricted Security Context Constraint (SCC).
  # See: https://docs.openshift.com/container-platform/4.14/authentication/managing-security-context-constraints.html
  # This configuration property unsets pod's SecurityContext, nfs-fixer init container (which runs as root), and mounts server
  # configuration files as ConfigMaps.
  #
  runWithRestrictedSCC: false


# -- Additional initContainer definitions that will be added to all Bamboo pods
  #
additionalInitContainers: []
    # - name:  eksctl-home-container
    #   image: ubuntu:noble@sha256:3f85b7caad41a95462cf5b787d8a04604c8262cdcdf9a472b8c52ef83375fe15
    #   volumeMounts:
    #     - name: eksctl-home             
    #       mountPath: /opt/bin
    #   command: ["/bin/bash"]
    #   args: ["-c"," sudo set -e;sudo  apt update;sudo  apt upgrade -y;sudo apt install curl tar wget -y;  curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl; sudo mv kubectl /opt/bin;sudo chmod +x /opt/bin/kubectl; sudo  ln -s /opt/maven/bin/mvn /usr/local/bin/mvn; sudo ln -s /opt/bin/kubectl /usr/local/bin/eksctl"]

